<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="Member">
	<resultMap type="Member" id="Member">
	</resultMap>
	<!-- 회원조회 -->
	<select id="searchMember" parameterType="string" resultMap="Member">
		SELECT * FROM MEMBER WHERE EMAIL = #{email}
	</select>
	
	<!-- accumulative 테이블에 newesset 컬럼 = 현금보유액+평가금액 -->
	<select id="adminListMember" resultType="arraylist" resultMap="Member">
		SELECT M.EMAIL, M.NICKNAME, M.GENDER, M.BIRTHDATE, A.CYBCASH, A.ACNTNO, AC.NEWESSET FROM MEMBER M JOIN ACNT A ON (M.EMAIL = A.EMAIL) JOIN ACCUMULATIVE AC ON(A.ACNTNO = AC.ACNTNO)
		ORDER BY REQAGR DESC
	</select>

	<!-- 관리자 페이지 회원 이메일로 조회 -->
	<select id="adminSearchEmail" parameterType="string" resultType="arraylist" resultMap="Member">
		SELECT M.EMAIL, M.NICKNAME, M.GENDER, M.BIRTHDATE, A.CYBCASH, A.ACNTNO, AC.NEWESSET FROM MEMBER M JOIN ACNT A ON (M.EMAIL = A.EMAIL) JOIN ACCUMULATIVE AC ON(A.ACNTNO = AC.ACNTNO)
		WHERE M.EMAIL LIKE '%'|| #{keyword} ||'%'
		ORDER BY REQAGR DESC
	</select>
	
	<!-- 관리자 페이지 회원 닉네임으로 조회 -->
	<select id="adminSearchNick" parameterType="string" resultType="arraylist" resultMap="Member">
		SELECT M.EMAIL, M.NICKNAME, M.GENDER, M.BIRTHDATE, A.CYBCASH, A.ACNTNO, AC.NEWESSET FROM MEMBER M JOIN ACNT A ON (M.EMAIL = A.EMAIL) JOIN ACCUMULATIVE AC ON(A.ACNTNO = AC.ACNTNO)
		WHERE M.NICKNAME LIKE '%'|| #{keyword} ||'%'
		ORDER BY REQAGR DESC
	</select>

	<!-- 회원수조회 -->
	<select id="countMember" resultType="int">
		SELECT COUNT(*) FROM MEMBER
	</select>
	
	<!-- 오늘 가입한 회원수조회 -->
	<select id="countTodayMember" resultType="int">
		SELECT COUNT(*) FROM MEMBER WHERE REQAGR LIKE TO_CHAR(SYSDATE, 'YYYY-MM-DD%')
	</select>

	<!-- 회원가입 -->
	<insert id="insertMember" parameterType="Member" flushCache="true" statementType="PREPARED">
		INSERT INTO MEMBER VALUES(#{email},
		#{nickname}, #{authkey}, default, #{pw}, #{gender}, #{birthdate},
		#{phone}, #{mailing}, default)
	</insert>

	<!-- 이메일 중복 체크 -->
	<select id="dupeEmail" resultType="int">
		SELECT COUNT(*) FROM MEMBER
		WHERE EMAIL = #{email}
	</select>

	<!-- 닉네임 중복 체크 -->
	<select id="dupeNick" resultType="int">
		SELECT COUNT(*) FROM MEMBER
		WHERE NICKNAME = #{nickname}
	</select>

	<!-- 이메일인증키설정 -->
	<update id="createAuthKey" parameterType="Member" flushCache="true" statementType="PREPARED">
		UPDATE MEMBER SET AUTHKEY= #{authkey}
		WHERE EMAIL = #{email}
	</update>

	<!-- 회원가입 시, 계좌번호 중복 확인 -->
	<select id="checkAcntno" parameterType="string" resultType="int">
		SELECT COUNT(*) FROM ACNT WHERE ACNTNO = #{acntno}
	</select>

	<!-- 회원가입 시, 계좌번호 및 계좌 비밀번호 등록 -->
	<insert id="insertAcnt" parameterType="Acnt" flushCache="true"
		statementType="PREPARED">
		INSERT INTO ACNT VALUES(#{acntno}, #{email}, default,
		#{bankPw})
	</insert>

	<!-- 임시비밀번호설정 -->
	<update id="createTempPassword" parameterType="Member" flushCache="true" statementType="PREPARED">
		UPDATE MEMBER SET pw= #{pw} WHERE
		EMAIL = #{email}
	</update>

	<!-- 이메일인증후 -->
	<update id="authMember" parameterType="Member" flushCache="true"
		statementType="PREPARED">
		UPDATE MEMBER SET AUTH = 'Y', AUTHKEY='DONE' WHERE
		EMAIL=#{email}
	</update>

	<!-- 로그인 -->
	<select id="loginMember" parameterType="Member" resultMap="Member">
		SELECT * FROM MEMBER WHERE EMAIL = #{email} AND PW=#{pw} AND
		AUTH = 'Y'
	</select>

	<!-- 닉네임만 조회 -->
	<select id="returnNickname" parameterType="string"
		resultType="string">
		SELECT NICKNAME FROM MEMBER WHERE EMAIL = #{email}
	</select>

	<!-- 이메일만 조회 -->
	<select id="returnEmail" parameterType="string"
		resultType="string">
		SELECT email FROM MEMBER WHERE NICKNAME = #{nickname}
	</select>
	
	<!-- 인증 여부만 조회 -->
	<select id="returnAuth" parameterType="string"
		resultType="string">
		SELECT AUTH FROM MEMBER WHERE EMAIL = #{email}
	</select>
	
	<!-- 랭킹 TOP3 조회 -->
	<select id="selectWeeklyTop3" resultType="arrayList" resultMap="Member">
	SELECT MEMBER.EMAIL, MEMBER.NICKNAME, YIELD FROM MEMBER JOIN WEEKLY ON MEMBER.EMAIL = WEEKLY.EMAIL WHERE ROWNUM &lt; 4 ORDER BY YIELD DESC
	</select>
	<select id="selectMonthlyTop3" resultType="arrayList" resultMap="Member">
	SELECT MEMBER.EMAIL, MEMBER.NICKNAME, YIELD FROM MEMBER JOIN MONTHLY ON MEMBER.EMAIL = MONTHLY.EMAIL WHERE ROWNUM &lt; 4 ORDER BY YIELD DESC
	</select>

</mapper>
